{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/blog.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","data","useState","filteredData","query","state","allFeaturedImages","allFile","edges","allPosts","allMarkdownRemark","featuredImageMap","Utils","filteredPosts","title","className","key","id","to","fields","featuredImage","frontmatter","subtitle","date","excerpt"],"mappings":"mOAAe,GACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,O,kCCjBP,0GAMe,sBAAe,IAAZY,EAAW,EAAXA,KAAW,EACDC,mBAAS,CACjCC,aAAc,GACdC,MAAO,KAFFC,EADoB,KAMrBC,GANqB,KAMDL,EAAKM,QAAQC,OAAS,IAC1CC,EAAWR,EAAKS,kBAAkBF,OAAS,GAE3CG,EAAmBC,IAAM7B,YAAYuB,EAD7B,kBA0BNH,EAAwBE,EAAxBF,aACFU,EAA0B,KADAR,EAAVD,MACeD,EAAeM,EAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAM,SACX,kBAAC,IAAD,CAAWA,MAAM,YAYjB,kBAAC,IAAD,CACEf,OAAK,EACLgB,UAAU,gEAETF,EAAcxB,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACjB,yBAAKwB,IAAKxB,EAAKyB,GAAIF,UAAU,OAC3B,kBAAC,IAAD,CACEG,GAAI1B,EAAK2B,OAAO5B,KAChB6B,cAAeT,EAAiBnB,EAAK2B,OAAO5B,MAC5CuB,MAAOtB,EAAK6B,YAAYP,MACxBQ,SAAU9B,EAAK6B,YAAYE,KAC3BC,QAAShC,EAAKgC,iBASrB,IAAMpB,EAAK","file":"component---src-pages-blog-js-f2868835ca17c4c92c2d.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n}\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, BlogLink } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { Container, Form, FormControl } from \"react-bootstrap\"\n\nexport default ({ data }) => {\n  const [state, setState] = useState({\n    filteredData: [],\n    query: \"\",\n  })\n\n  const allFeaturedImages = data.allFile.edges || []\n  const allPosts = data.allMarkdownRemark.edges || []\n  const regex = /\\/[blog].*\\/|$/\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex)\n\n  const handleChange = e => {\n    const query = e.target.value\n\n    const filteredData = allPosts.filter(post => {\n      // query will run on the following fields\n      const { description, title, tags, author } = post.node.frontmatter\n      // standardize query\n      const stdQuery = query.toLowerCase()\n      return (\n        post.node.excerpt.toLowerCase().includes(stdQuery) ||\n        (description && description.toLowerCase().includes(stdQuery)) ||\n        title.toLowerCase().includes(stdQuery) ||\n        author.toLowerCase().includes(stdQuery) ||\n        (tags && tags.join(\"\").toLowerCase().includes(stdQuery))\n      )\n    })\n\n    setState({\n      query,\n      filteredData,\n    })\n  }\n\n  const { filteredData, query } = state\n  const filteredPosts = query !== \"\" ? filteredData : allPosts\n\n  return (\n    <PageLayout>\n      <SEO title=\"Blog\" />\n      <PageTitle title=\"My Blog\" />\n      {/*<Container className=\"px-5 mb-5 text-center\">\n        <Form className=\"blog-filter\">\n          <FormControl\n            className=\"bg-none search\"\n            type=\"text\"\n            placeholder=\"Search\"\n            onChange={handleChange}\n          />\n        </Form>\n      </Container>*/}\n\n      <Container\n        fluid\n        className=\"p-3 w-auto text-left d-flex flex-wrap justify-content-center\"\n      >\n        {filteredPosts.map(({ node }) => (\n          <div key={node.id} className=\"p-3\">\n            <BlogLink\n              to={node.fields.slug}\n              featuredImage={featuredImageMap[node.fields.slug]}\n              title={node.frontmatter.title}\n              subtitle={node.frontmatter.date}\n              excerpt={node.excerpt}\n            />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/blog/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            tags\n            author\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"jpg\" }\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/blog/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}